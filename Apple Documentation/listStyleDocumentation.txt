A table or list can represent data that’s organized in groups or hierarchies, and it can support user interactions like selecting, adding, deleting, and reordering. Apps and games in all platforms can use tables to present content and options; many apps use lists to express an overall information hierarchy and help people navigate it. For example, iOS Settings uses a hierarchy of lists to help people choose options, and several apps — such as Mail in iPadOS and macOS — use a table within a split view.
Sometimes, people need to work with complex data in a multicolumn table or a spreadsheet. Apps that offer productivity tasks often use a table to represent various characteristics or attributes of the data in separate, sortable columns.
Best practices
Prefer displaying text in a list or table. A table can include any type of content, but the row-based format is especially well suited to making text easy to scan and read. If you have items that vary widely in size — or you need to display a large number of images — consider using a collection instead.
Let people edit a table when it makes sense. People appreciate being able to reorder a list, even if they can’t add or remove items. In iOS and iPadOS, people must enter an edit mode before they can select table items.
Provide appropriate feedback when people select a list item. The feedback can vary depending on whether selecting the item reveals a new view or toggles the item’s state. In general, a table that helps people navigate through a hierarchy persistently highlights the selected row to clarify the path people are taking. In contrast, a table that lists options often highlights a row only briefly before adding an image — such as a checkmark — indicating that the item is selected.
Content
Keep item text succinct so row content is comfortable to read. Short, succinct text can help minimize truncation and wrapping, making text easier to read and scan. If each item consists of a large amount of text, consider alternatives that help you avoid displaying over-large table rows. For example, you could list item titles only, letting people choose an item to reveal its content in a detail view.
Consider ways to preserve readability of text that might otherwise get clipped or truncated. When a table is narrow — for example, if people can vary its width — you want content to remain recognizable and easy to read. Sometimes, an ellipsis in the middle of text can make an item easier to distinguish because it preserves both the beginning and the end of the content.
Use descriptive column headings in a multicolumn table. Use nouns or short noun phrases with title-style capitalization, and don’t add ending punctuation. If you don’t include a column heading in a single-column table view, use a label or a header to help people understand the context.

Style
Choose a table or list style that coordinates with your data and platform. Some styles use visual details to help communicate grouping and hierarchy or to provide specific experiences. In iOS and iPadOS, for example, the grouped style uses headers, footers, and additional space to separate groups of data; the elliptical style available in watchOS makes items appear as if they’re rolling off a rounded surface as people scroll; and macOS defines a bordered style that uses alternating row backgrounds to help make large tables easier to use. For developer guidance, see ListStyle.
Choose a row style that fits the information you need to display. For example, you might need to display a small image in the leading end of a row, followed by a brief explanatory label. Some platforms provide built-in row styles you can use to arrange content in list rows, such as the UIListContentConfiguration API you can use to lay out content in a list’s rows, headers, and footers in iOS, iPadOS, and tvOS.

ListStyle
A protocol that describes the behavior and appearance of a list.
iOS 13.0+
iPadOS 13.0+
Mac Catalyst 13.0+
macOS 10.15+
tvOS 13.0+
visionOS 1.0+
watchOS 6.0+
protocol ListStyle

Topics
Getting built-in list styles
static var automatic: DefaultListStyle
The list style that describes a platform’s default behavior and appearance for a list.
static var bordered: BorderedListStyle
The list style that describes the behavior and appearance of a list with standard border.
static var carousel: CarouselListStyle
The carousel list style.
static var elliptical: EllipticalListStyle
The list style that describes the behavior and appearance of an elliptical list.
static var grouped: GroupedListStyle
The list style that describes the behavior and appearance of a grouped list.
static var inset: InsetListStyle
The list style that describes the behavior and appearance of an inset list.
static var insetGrouped: InsetGroupedListStyle
The list style that describes the behavior and appearance of an inset grouped list.
static var plain: PlainListStyle
The list style that describes the behavior and appearance of a plain list.
static var sidebar: SidebarListStyle
The list style that describes the behavior and appearance of a sidebar list.
Deprecated styles
static func bordered(alternatesRowBackgrounds: Bool) -> BorderedListStyle
The list style that describes the behavior and appearance of a list with standard border.
Deprecated
static func inset(alternatesRowBackgrounds: Bool) -> InsetListStyle
The list style that describes the behavior and appearance of an inset list with optional alternating row backgrounds.
Deprecated
Supporting types
struct DefaultListStyle
The list style that describes a platform’s default behavior and appearance for a list.
struct BorderedListStyle
The list style that describes the behavior and appearance of a list with standard border.
struct CarouselListStyle
The carousel list style.
struct EllipticalListStyle
The list style that describes the behavior and appearance of an elliptical list.
struct GroupedListStyle
The list style that describes the behavior and appearance of a grouped list.
struct InsetListStyle
The list style that describes the behavior and appearance of an inset list.
struct InsetGroupedListStyle
The list style that describes the behavior and appearance of an inset grouped list.
struct PlainListStyle
The list style that describes the behavior and appearance of a plain list.
struct SidebarListStyle
The list style that describes the behavior and appearance of a sidebar list.

automatic
The list style that describes a platform’s default behavior and appearance for a list.
iOS 13.0+
iPadOS 13.0+
Mac Catalyst 13.0+
macOS 10.15+
tvOS 13.0+
visionOS 1.0+
watchOS 6.0+
static var automatic: DefaultListStyle { get }
Available when Self is DefaultListStyle.
