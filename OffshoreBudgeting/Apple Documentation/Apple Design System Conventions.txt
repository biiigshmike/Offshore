Apple design system conventions
1) typography
use San Francisco and system text styles, not hardcoded sizes. system styles scale with Dynamic Type and platform. Apple Developer+2Apple Developer+2
build hierarchy with weight, size, and spacing, not extra colors. aim for clear reading rhythm and generous line height. Apple Developer
SwiftUI patterns
Text("Title").font(.title).fontWeight(.semibold)          // primary heading
Text("Section Header").font(.headline)                    // section
Text("Body copy that wraps...").font(.body)               // default
Text("Footnote").font(.footnote).foregroundStyle(.secondary)
dynamic type in previews

#Preview(traits: .sizeCategory(.accessibilityExtraExtraExtraLarge)) {
  ContentView()
}

2) spacing, layout, and safe areas
respect safe areas and layout guides to avoid clipping around corners, sensor housings, toolbars, and the home indicator. keep content inside safe areas, backgrounds can extend behind. 
drive adaptation with size classes, not device checks. use compact vs regular to change columns, paddings, and control density. 
swiftui patterns
struct PaddedGroup: View {
  var body: some View {
    VStack(alignment: .leading, spacing: 12) {
      // rows...
    }
    .padding(.horizontal, 16)
    .padding(.vertical, 12)
    .frame(maxWidth: .infinity, alignment: .leading)
  }
}
@Environment(\.horizontalSizeClass) private var h
let columns = (h == .compact) ? [GridItem(.flexible())]
                              : [GridItem(.flexible()), GridItem(.flexible())]
3) color and contrast
prefer semantic, dynamic colors that adapt to light and dark, rather than fixed hex values. examples: label, secondaryLabel, systemBackground, separator. 
keep readability first. use system roles for text and surfaces so contrast stays correct as materials and appearances shift. 
swiftui patterns
ZStack {
  Color(.systemBackground)        // surface that adapts
  VStack {
    Text("Primary").foregroundStyle(.primary)
    Text("Secondary").foregroundStyle(.secondary)
    Divider().foregroundStyle(.separator)
  }
}
Image("Hero")         // provide dark-mode variant via asset catalog “Appearances”
  .resizable()
  .scaledToFill()
4) materials and chrome
use system materials to separate chrome from content. do not stack multiple translucent layers behind text. keep hierarchy clear. 
favor .toolbarBackground(.automatic) and default toolbar color scheme before custom fills, so Liquid Glass and legacy paths both look right. 
swiftui patterns
.navigationBarTitleDisplayMode(.inline)
.toolbarBackground(.automatic, for: .navigationBar)
.toolbarColorScheme(.automatic, for: .navigationBar)

List { /* rows */ }
  .scrollContentBackground(.hidden)
  .background(.ultraThinMaterial)  // one material at the container level

5) SF Symbols
symbols align with text and come in nine weights and three scales. use rendering modes: monochrome, hierarchical, palette, multicolor. keep accessibility and weight matching your text.

Label("Add", systemImage: "plus.circle.fill")            // text-aligned
Image(systemName: "chart.pie.fill").symbolRenderingMode(.palette)
  .foregroundStyle(.primary, .tertiary)

6) lists, tables, and grouping
use lists/tables to present grouped or hierarchical data. keep row layouts consistent and scannable. reserve heavy visuals for preview rows, not every cell. 
on iPhone prefer stacked lists. tables with columns are better on iPad and Mac where there is room to sort and disclose hierarchy. 
swiftui patterns
List {
  Section("Accounts") {
    ForEach(items) { item in
      HStack(spacing: 12) {
        Image(systemName: item.icon).foregroundStyle(.secondary)
        VStack(alignment: .leading) {
          Text(item.title).font(.body)
          Text(item.subtitle).font(.subheadline).foregroundStyle(.secondary)
        }
        Spacer()
        Text(item.trailing).font(.callout).foregroundStyle(.secondary)
      }
      .contentShape(Rectangle())
    }
  }
}
.listStyle(.insetGrouped)
8) house rules for Offshore
use system text styles for all text. no raw font sizes unless there is no equivalent style. 
use safe areas for content, and a single container material when you need gloss. never stack materials behind text. 
color comes from semantic roles. Color(.systemBackground), .primary, .secondary, .separator. no fixed hex for surfaces or body text. 
symbols match their adjacent text weight and size. prefer Label for icon + text. pick rendering mode intentionally. 
lists are the default on iPhone. use tables on iPad/Mac when columns or sorting add value. keep row density readable. 
adapt with size classes. never branch on device names. update columns, paddings, and control density accordingly. 
begin from Apple’s UI kits and spacing, then layer brand. do not replace system defaults unless required. 


